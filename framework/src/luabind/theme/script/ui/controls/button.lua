Button_Template_ = {	name = "button",		onItemCreate = function(self, evt)		self.m_horizable = true				self.background:d_setMargins( {3, 3, 3, 3} )		self.background:d_setImage(Dw.SNormal, "dwgui:btn_4word_normal.png")		self.background:d_setImage(Dw.SHover, "dwgui:btn_4word_pushed.png")		self.background:d_setImage(Dw.SPressDown, "dwgui:btn_4word_hover.png")				self:d_setBackground("dwgui:btn_4word_normal.png")		self:d_setHorizable(true)				self.m_content = GraphicsItem {parent = self}		local anchors = self.m_content:d_anchors()		anchors:d_setFill(self)	end,		onItemDestroy = function(self, evt)	end,		d_setBackground = function(self, url)		local backgroundImg = Image.new(url)		local imgSize = backgroundImg:d_size()		self:d_setBoundingRect( {0, 0, imgSize.width, imgSize.height} )		self:d_setImage(Dw.SNormal, url)		backgroundImg = nil	end,		d_setIcon = function(self, url)		if not self.m_icon then			self.m_icon = GraphicsPixmapItem{ parent = self.m_content,}			self.m_icon:d_setVisible(false)			self.m_icon:d_setName("icon")			self:d_setHorizable(self.m_horizable)		end		self.m_icon:d_setPixmap(url)		self.m_icon:d_setVisible(true)	end,		d_setText = function(self, txt)		if not self.m_text then			self.m_text = GraphicsSimpleTextItem{ parent = self.m_content }			self.m_text:d_setVisible(false)			self.m_text:d_setName("text")			self:d_setHorizable(m_horizable)		end		self.m_text:d_setText(txt)		self.m_text:d_setVisible(true)	end,		d_setImage = function(self, state, url)		self.background:d_setImage(state, url)	end,		d_setHorizable = function(self, b)		self.m_horizable = b		if self.m_horizable then			if self.m_icon then				self.m_icon:d_clearAnchors()				Anchor.setLeft(self.m_icon, AnchorLine(self.m_content, Dw.Left))				Anchor.setVCenter(self.m_icon, AnchorLine(self.m_content, Dw.VCenter))			end						if self.m_text then				self.m_text:d_clearAnchors()				if self.m_icon then					Anchor.setLeft(self.m_text, AnchorLine(self.m_icon, Dw.Right))				else					Anchor.setLeft(self.m_text, AnchorLine(self.m_content, Dw.Left))				end								Anchor.setVCenter(self.m_text, AnchorLine(self.m_content, Dw.VCenter))			end		else			if self.m_icon then				self.m_icon:d_clearAnchors()				Anchor.setTop(self.m_icon, AnchorLine(self.m_content, Dw.Top))				Anchor.setHCenter(self.m_icon, AnchorLine(self.m_content, Dw.HCenter))			end			if self.m_text then				self.m_text:d_clearAnchors()				if self.m_icon then					Anchor.setTop(self.m_text, AnchorLine(self.m_icon, Dw.Bottom))				else					Anchor.setTop(self.m_text, AnchorLine(self.m_content, Dw.Top))				end								Anchor.setHCenter(self.m_text, AnchorLine(self.m_content, Dw.HCenter))			end		end	end,		d_setTextOnly = function(self)		if self.m_icon then			DestroyItem(self.m_icon)			self.m_icon = nil		end				if not self.m_text then			self.m_text = GraphicsSimpleTextItem{ parent = self.m_content }			self.m_text:d_setVisible(false)			self.m_text:d_setName("text")		end		self.m_text:d_clearAnchors();		Anchor.setCenterIn(self.m_text, AnchorLine(self.m_content))	end,		d_setIconOnly = function(self)		if self.m_text then			DestroyItem(self.m_text)			self.m_text = nil		end		if not self.m_icon then			self.m_icon = GraphicsPixmapItem{ parent = self.m_content,}			self.m_icon:d_setVisible(false);			self.m_icon:d_setName("icon");		end		self.m_icon:d_clearAnchors();		Anchor.setCenterIn(self.m_icon, AnchorLine(self.m_content))	end,		d_setButtonImage = function(self, normalurl, hoverurl, pressurl)		self:d_setBackground(normalurl)		self:d_setImage(Dw.SHover, hoverurl)		self:d_setImage(Dw.SPressDown, pressurl)	end,		d_adjustSize = function(self)		if not self.m_icon or not self.m_text then return end				if self.m_horizable then			local anchorsIcon = self.m_icon:d_anchors()			local anchorsText = self.m_text:d_anchors()			local totalWidth = self.m_icon.width + self.m_text.width			local totalMargin = anchorsIcon:d_leftMargin() + anchorsText:d_leftMargin() + anchorsText:d_rightMargin()			self.width = totalWidth + totalMargin		else			local anchorsIcon = self.m_icon:d_anchors()			local anchorsText = self.m_text:d_anchors()						local totalHeight = self.m_icon.height + self.m_text.height			local totalMargin = anchorsIcon:d_topMargin() + anchorsText:d_topMargin() + anchorsText:d_bottomMargin()			self.height = totalHeight + totalMargin		end	end,		d_setButtonMargin = function (self, left, left, right)		if not self.m_icon or not self.m_text then return end		if self.m_horizable then			local anchorsIcon = self.m_icon:d_anchors()			local anchorsText = self.m_text:d_anchors()						anchorsIcon:d_setLeftMargin(left)			anchorsText:d_setLeftMargin(left)			anchorsText:d_setRightMargin(right)		else			local anchorsIcon = self.m_icon:d_anchors()			local anchorsText = self.m_text:d_anchors()						anchorsIcon:d_setTopMargin(left)			anchorsText:d_setTopMargin(left)			anchorsText:d_setBottomMargin(right)		end		self:d_adjustSize()	end,}function Button(...)	return WidgetItem(Button_Template_, ...)end--[[ closed button ]]ClosedButton_Template_ = {	name = "closedButton",		onItemCreate = function(self, evt)		Button_Template_.onItemCreate(self, evt)				self.parent = self.parent.background				self:d_setIconOnly()			self:d_setButtonImage( "dwgui:close_normal.png",			"dwgui:close_hover.png", "dwgui:close_down.png")				Anchor.setTopMargin(self, -1)		Anchor.setTop(self, AnchorLine(self.parent, Dw.Top))		Anchor.setRightMargin(self, -2)		Anchor.setRight(self, AnchorLine(self.parent, Dw.Right))	end,		onMouseClicked = function(self, evt)		self.parent.parent:d_close()	end,}function ClosedButton(...)	return WidgetItem(Button_Template_, ClosedButton_Template_, ...)end--[[ mini button ]]MinimizeButton_Template_ ={	name = "minimizeButton",		onItemCreate = function(self, evt)		Button_Template_.onItemCreate(self, evt)				self.parent = self.parent.background				self:d_setIconOnly()		self:d_setButtonImage("dwgui:min_normal.png", 			"dwgui:min_hover.png", "dwgui:min_down.png")				Anchor.setTopMargin(self, -1)		Anchor.setTop(self, AnchorLine(self.parent, Dw.Top))		Anchor.setRight(self, AnchorLine(self.parent:d_findChild("closedButton"), Dw.Left))	end,		onMouseClicked = function(self, evt)		self.parent.parent:d_show(Dw.SW_Minimize)	end,}function MinimizeButton(...)	return WidgetItem(Button_Template_, MinimizeButton_Template_, ...)end